from tkinter import *
import string
import itertools

result = ""
normal_form_1 = ""
normal_form_2 = ""
list1 = []
list2 = []
alphabet = list(string.ascii_letters)
symbol_lexique = ['(', ')', ' ', '&', '|', '-', '¬', '∨', '∧']
all_symbol = symbol_lexique + alphabet
check_count = 0
nb_variable = 0
count_variable1 = []
count_variable2 = []
#print(eval("(1 & 0) | (1 & 1) "))
#print(all_symbol)


def check():
    """

    """
    global nb_variable, check_count, normal_form_1, normal_form_2, list1, list2, count_variable2, count_variable1

    logicResult.set("")

    if check_count == 0:
        count_variable1 = []
        count_variable2 = []
        count_bad_1 = []
        count_bad_2 = []
        normal_form_1 = str(logic1.get())
        normal_form_2 = str(logic2.get())
        list1 = list(normal_form_1)
        list2 = list(normal_form_2)
        print(list1)
        print(list2)

        for l in range(0, len(list1)):
            if list1[l] not in all_symbol:
                count_bad_1.append(list1[l])

        for l in range(0, len(list2)):
            if list2[l] not in all_symbol:
                count_bad_2.append(list2[l])


        for letter in alphabet:
            if normal_form_1.count(letter) > 0:
                count_variable1.append(str(letter))
            if normal_form_2.count(letter) > 0:
                count_variable2.append(str(letter))

        if len(count_variable1) != len(count_variable2):
            logic1.set("bad Entry, different number of variable : " + str(count_variable1) +
                       " variables")
            logic2.set("bad Entry, different number of variable : " + str(count_variable2) +
                       " variables")

        elif len(set(count_variable1).intersection(set(count_variable2))) != len(count_variable1):
            logic1.set("bad Entry, not the same variable : " + str(count_variable1))
            logic2.set("bad Entry, not the same variable : " + str(count_variable2))

        elif len(count_bad_1) > 0 or len(count_bad_2) > 0:
            logic1.set("bad Entry, unresolved symbol : " + str(count_bad_1))
            logic2.set("bad Entry, unresolved symbol : " + str(count_bad_2))

        else:
            logic1.set("Entry ok")
            logic2.set("Entry ok")
            nb_variable = len(count_variable1)
            check_count += 1
    else:
        if (normal_form_1 == str(logic1.get()) and normal_form_2 == str(logic2.get())) or logic1.get() == "Entry ok" \
                or logic1.get() == "the inspection has already been done":
            logic1.set("the inspection has already been done")
            logic2.set("the inspection has already been done")
        else:
            check_count = 0
            check()


def format_logic(logic_string):
    """

    :param logic_string:
    :return:
    """
    logic_string_copy = logic_string.replace("&", "*").replace("|", "+").replace("∨", "+").replace("∧", "*")
    return logic_string_copy


def reset():
    logic1.set('enter your first logic expression')
    logic2.set('enter your second logic expression')
    logicResult.set("")
    normal_form_1 = ""
    normal_form_2 = ""
    list1 = []
    list2 = []
    count_variable1 = []
    count_variable2 = []


def compare():
    """
    """
    if check_count > 0:
        logic1.set(normal_form_1)
        logic2.set(normal_form_2)
        logic_table_instance = list(itertools.product('01', repeat=nb_variable))

        print(logic_table_instance)

        normal_form_1_format = format_logic(normal_form_1)
        normal_form_2_format = format_logic(normal_form_2)

        print(normal_form_1, id(normal_form_1))
        print(normal_form_1_format, id(normal_form_1_format))
        print(normal_form_2, id(normal_form_2))
        print(normal_form_2_format, id(normal_form_2_format))

        truth_table_list = []
        for e in range(0, len(logic_table_instance)):
            normal_form_1_format_copy = normal_form_1_format
            normal_form_2_format_copy = normal_form_2_format
            for i in range(0, len(count_variable1)):
                normal_form_1_format_copy = normal_form_1_format_copy.replace(count_variable1[i],
                                                                              logic_table_instance[e][i])
                normal_form_2_format_copy = normal_form_2_format_copy.replace(count_variable1[i],
                                                                              logic_table_instance[e][i])

            normal_form_1_format_copy_final = normal_form_1_format_copy.replace("-0", "1").replace("-1", "0")\
                .replace("- 0", "1").replace("- 1", "0")
            normal_form_2_format_copy_final = normal_form_2_format_copy.replace("-0", "1").replace("-1", "0")\
                .replace("- 0", "1").replace("- 1", "0")

            try:
                eval(normal_form_1_format_copy_final)
                eval(normal_form_2_format_copy_final)
            except SyntaxError:
                logic1.set("Syntax Error, no operator between variables")
                logic2.set("Syntax Error, no operator between variables")

            truth_table_list.append((logic_table_instance[e], eval(normal_form_1_format_copy_final),
                                     eval(normal_form_2_format_copy_final)))

            print(normal_form_1_format_copy_final, normal_form_2_format_copy_final)
        print(truth_table_list)

        logicResult.set("They're equal")
        for test in range(0, len(truth_table_list)):
            if truth_table_list[test][1] != truth_table_list[test][2]:
                logicResult.set("Not Equal")
                break
            else:
                continue
    else:
        logicResult.set("check not done")


if __name__ == "__main__":
    gui = Tk()
    gui.configure(background="light blue")
    gui.title("Logic Comparator Pro")
    gui.geometry("800x400")

    logic1 = StringVar()
    logic2 = StringVar()
    logicResult = StringVar()

    name_label1 = Label(gui, text="Logic Proposition 1", pady=10, bg="light grey", relief='raised').pack(fill=X)
    logic_entry1 = Entry(gui, bg="white", fg="black", textvariable=logic1).pack(fill=BOTH)
    name_label2 = Label(gui, text="Logic Proposition 2", pady=10, bg="light grey", relief='raised').pack(fill=BOTH)
    logic_entry2 = Entry(gui, bg="white", fg="black", textvariable=logic2).pack(fill=BOTH)
    bouton_check = Button(gui, text=' Check ', fg='white', bg='blue', bd=4, command=lambda: check()) \
        .pack(fill=BOTH, padx=350, pady=5)
    bouton_compare = Button(gui, text=' Compare ', fg='white', bg='green', bd=4, command=lambda: compare()) \
        .pack(fill=BOTH, padx=350, pady=5)

    logic_entry3 = Entry(gui, bg="white", fg="black", textvariable=logicResult).pack(fill=BOTH, padx=350)

    bouton_compare = Button(gui, text=' Reset ', fg='white', bg='red', bd=4, command=lambda: reset()) \
        .pack(fill=BOTH, padx=350, pady=5)
    logic1.set('enter your first logic expression')
    logic2.set('enter your second logic expression')
    logic1.set('(b & - a) | (c & -a)')
    logic2.set('(b | c) & -a')

    gui.mainloop()
